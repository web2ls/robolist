{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cardsList","robots","map","robot","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","isPending","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb9ea581.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?200x200`} alt=' robo' />\n            <div>\n                <p>{name}</p>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    const cardsList = robots.map(robot => {\n        return (\n            <Card \n                id={robot.id} \n                name={robot.name} \n                email={robot.email} \n                key={robot.id} \n                />\n        )\n    })\n    return (\n        <div>\n            {cardsList}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n                type='search' \n                className='pa3 ba b--green bg-lightest-blue' \n                placeholder='search robots' \n                onChange={searchChange}\n                />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Errorr</h1>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport {setSearchField, requestRobots} from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: (event) => dispatch(requestRobots())\n    }\n}\n\nclass App  extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const {searchField, robots, isPending, onSearchChange} = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n\n        return isPending ?\n            <h1>Loading</h1> :\n        (\n            <div className='tc'>\n                <h1>RoboFriends</h1>\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ' '\n};\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n\n        default:\n            return state;\n    }\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}